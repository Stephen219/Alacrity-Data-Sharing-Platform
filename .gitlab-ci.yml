default:
  tags:
    - comsc-ci

image: node:20-alpine

stages:
  - lint # Linting for both frontend and backend
  - test # Testing for both frontend and backend
  - build # Build frontend
  - deploy 
  - dev # Development server for frontend

variables:
  CI_DEBUG_TRACE: "false"

# 1. Linting - Frontend
lint-frontend:
  stage: lint
  script:
    - echo "Installing dependencies..."
    - cd alacrity_frontend
    - npm ci
    - echo "Running lint..."
    - npm run lint --fix
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_frontend/**/*

# 2. Linting - Backend (Pylint)
lint-backend:
  stage: lint
  image: python:3.10
  before_script:
    - pip install pylint
  script:
    - echo "Running Pylint..."
    - pylint alacrity_backend --exit-zero  # Allow non-zero exit codes to avoid failing CI for now
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_backend/**/*.py

# # 3. Testing - Frontend
# test-frontend:
#   stage: test
#   script:
#     - cd alacrity_frontend
#     - npm ci
#     - echo "Running frontend tests..."
#     - npm run test
#   artifacts:
#     paths:
#       - test-reports/
#     expire_in: 1 week
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#       changes:
#         - alacrity_frontend/**/*





# 3. Testing - Frontend 
test-frontend:
  stage: test
  script:
    - cd alacrity_frontend
    - npm ci
    - echo "Running frontend tests..."
    - npm run test -- --coverage
    - echo "Checking test coverage..."
    - ls -al coverage/lcov-report
    - ls -l coverage/lcov-report
    - cat coverage/lcov-report/index.html
    -    # Extract coverage values using the first four lines in the coverage report
    - COVERAGE_STATEMENT=$(grep -oE 'data-value="[0-9.]+' coverage/lcov-report/index.html | head -1 | cut -d'"' -f2)
    - COVERAGE_BRANCH=$(grep -oE 'data-value="[0-9.]+' coverage/lcov-report/index.html | sed -n '2p' | cut -d'"' -f2)
    - COVERAGE_FUNCTION=$(grep -oE 'data-value="[0-9.]+' coverage/lcov-report/index.html | sed -n '3p' | cut -d'"' -f2)
    - COVERAGE_LINES=$(grep -oE 'data-value="[0-9.]+' coverage/lcov-report/index.html | sed -n '4p' | cut -d'"' -f2)
    
    # Print extracted values
    - echo  $COVERAGE_STATEMENT%
    - echo  "Branch coverage:"

    - echo " $COVERAGE_BRANCH%
    
    - echo  $COVERAGE_FUNCTION%
    - echo  $COVERAGE_LINES%
    - COVERAGE=$(grep -oE 'data-value="[0-9]+(\.[0-9]+)?%"' coverage/lcov-report/index.html | head -1 | grep -oE '[0-9]+(\.[0-9]+)?')

    



  
    # - COVERAGE=$(grep -oE '[0-9]+\.[0-9]+' coverage/lcov-report/index.html | head -1)
    # - COVERAGE=$(grep -oP '(?<=<span class="strong">)[0-9]+\.[0-9]+(?=% </span>\s*<span class="quiet">Statements)' coverage/lcov-report/index.html | head -1)
    #  Extract Statement Coverage from HTML
    - COVERAGE_STATEMENT=$(grep -oP '(?<=<span class="strong">)[0-9]+\.[0-9]+(?=% </span>\s*<span class="quiet">Statements)' coverage/lcov-report/index.html | head -1)

    - echo "Branch coverage:"
    - echo  $COVERAGE_BRANCH%

    - echo "Function coverage:"
    - echo  $COVERAGE_FUNCTION%

    - echo "Statement coverage:"
    - echo  $COVERAGE_STATEMENT%

    - echo "Statementghjkl;s coverage:"
    - echo  $COVERAGE%
    - COVERAGE_INT=$(printf "%.0f" "$COVERAGE") 
    - echo "Statement coverage (int):"
    - echo "Statementghjkl;s coverage:"
    - echo  $COVERAGE_INT
  
    - if [ "$COVERAGE_INT" -lt 20 ]; then echo ; exit 1; fi
  artifacts:
    paths:
      - alacrity_frontend/coverage/
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_frontend/**/*

# 4. Testing - Backend (Python Tests)
test-backend:
  stage: test
  image: python:3.10
  before_script:
    - cd alacrity_backend
    - pip install -r requirements.txt
  script:
    - echo "Running backend tests..."
    - python manage.py test  # Use pytest if needed: pytest --cov=.
  artifacts:
    paths:
      - test-reports/
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_backend/**/*

# 5. Build - Frontend
build-frontend:
  stage: build
  script:
    - cd alacrity_frontend
    - npm ci
    - npm run build
  artifacts:
    paths:
      - alacrity_frontend/.next/
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_frontend/**/*

# 6. Dev - Frontend
dev:
  stage: dev
  script:
    - cd alacrity_frontend
    - npm ci
    - npm run dev &
    - sleep 40
    - wget --spider --quiet http://localhost:3000 || { echo "Dev server not running"; exit 1; }
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_frontend/**/*

# # 7. Deployment (Not functional yet)
# deploy:
#   stage: deploy
#   script:
#     - echo "Deploying..."
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
#   environment:
#     name: production

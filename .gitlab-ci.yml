
#
# GitLab CI/CD Configuration for Alacrity Project
#
# This configuration defines the CI/CD pipeline for the backend and frontend of the Alacrity project.
# The pipeline includes stages for linting, testing, building, deployment, and development. 
# It runs the tests and deploys both the backend (Django) and frontend (React/Next.js) apps.
# 
# Key stages:
#  - lint: Runs linting checks to ensure code quality.
#  - test: Runs both backend and frontend tests.
#  - build: Builds the frontend app for production.
#  - deploy: Deploys the app (not included in this file, can be configured separately).
#  - dev: Runs the frontend app in development mode for debugging and testing.

# Defines the tags that the runners should use for this CI pipeline
default:
  tags:
    - comsc-ci

image: node:20-alpine

stages:
  - lint
  - test
  - build
  - deploy
  - dev













variables:
  CI_DEBUG_TRACE: "false"
  # MYSQL_ROOT_PASSWORD: "comsc"
  # MYSQL_DATABASE: "project_db"
  PYTHON_VERSION: "3.10"
  CI: 'true'











test-backend:
  stage: test
  image: python:${PYTHON_VERSION}
  services:
    - name: mariadb:10.5
      alias: mysql
      variables:
        MYSQL_DATABASE: project_db
        MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        MYSQL_ROOT_HOST: "%"
  variables:
    MYSQL_HOST: mysql
    MYSQL_TCP_PORT: 3306
    MYSQL_DATABASE: alacrity_db
    # Django-specific environment variables
    DJANGO_DATABASE_NAME: alacrity_db
    DJANGO_DATABASE_USER: root
    DJANGO_DATABASE_PASSWORD: ""
    DJANGO_DATABASE_HOST: mysql
    DJANGO_DATABASE_PORT: 3306
    # Other required Django settings
    DJANGO_SETTINGS_MODULE: alacrity_backend.settings
    SECRET_KEY: "ci-test-key"
    
  before_script:
  - cd alacrity_backend
  - apt-get update && apt-get install -y default-mysql-client
  - pip install -r requirements.txt
  - pip install coverage mysqlclient
  
  # Drop the database and recreate it
  - mysql -h mysql -uroot -e "DROP DATABASE IF EXISTS alacrity_db;"
  - mysql -h mysql -uroot -e "CREATE DATABASE alacrity_db"
  - mysql -h mysql -uroot -e "ALTER DATABASE alacrity_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
  # set foreign key checks to false
  - mysql -h mysql -uroot -e "SET GLOBAL FOREIGN_KEY_CHECKS=0;"
  # show the migrations
 
  - python manage.py showmigrations
  - mysql -h mysql -uroot -e "SHOW TABLES FROM alacrity_db;"
  # remove the migrations
  # - rm -rf ./alacrity_backend/migrations
  # - rm rf .datasets/migrations
  # - rm -rf ./users/migrations

  
  

  
 
  
  - python manage.py makemigrations contenttypes
  # show the migrations
  - python manage.py makemigrations
  - python manage.py showmigrations
  - mysql -h mysql -uroot -e "SHOW TABLES FROM alacrity_db;"

  
  # Make migrations and apply the others normally
  
 
  - python manage.py migrate
  - python manage.py migrate contenttypes
  - python manage.py migrate admin
  - python manage.py migrate auth
  - python manage.py migrate contenttypes
  - python manage.py migrate sessions
 
  - python manage.py migrate --noinput




  # show tables
  - mysql -h mysql -uroot -e "SHOW TABLES FROM alacrity_db;"
    
  script:
    - echo "Running backend tests..."
    # - coverage run --omit="*/migrations/*,*/tests/*" manage.py test
    - coverage run --omit="*/migrations/*,*/tests/*" manage.py test --noinput
    - coverage report
    - COVERAGE_PERCENT=$(coverage report | tail -n 1 | awk '{print $NF}' | sed 's/%//')
    - |
      if [ $(echo "$COVERAGE_PERCENT < 50" | bc) -eq 1 ]; then 
        echo "Coverage is below 50%. Exiting..."
        exit 1
      fi
  artifacts:
    paths:
      - test-reports/
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_backend/**/*





        
# 3. Testing - Frontend 
test-frontend:
  stage: test
  #TODO: fix this thing    it is the most redundant thing and i need it refactored
  script:
    - cd alacrity_frontend
    # FIXME : i am not sure if this is the right way to do it
    - npm ci
    - echo "Running frontend tests..."
    - npm run test -- --coverage
    - npm run test -- --coverage --coverageReporters=json-summary
    - echo "Extracting Coverage Metrics..."
    - STATEMENTS_COVERAGE=$(grep -o '"statements":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' coverage/coverage-summary.json | awk -F':' '{print $NF}')
    - FUNCTIONS_COVERAGE=$(grep -o '"functions":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' coverage/coverage-summary.json | awk -F':' '{print $NF}')
    - BRANCHES_COVERAGE=$(grep -o '"branches":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' coverage/coverage-summary.json | awk -F':' '{print $NF}')
    - LINES_COVERAGE=$(grep -o '"lines":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' coverage/coverage-summary.json | awk -F':' '{print $NF}')
    - echo $STATEMENTS_COVERAGE%
    - echo  $FUNCTIONS_COVERAGE%
    - echo  $BRANCHES_COVERAGE%
    - echo  $LINES_COVERAGE%
    - if [ "$STATEMENTS_COVERAGE" -lt 40 ]; then echo ; exit 1; fi   # 20 for this branch to go in 
    - if [ "$FUNCTIONS_COVERAGE" -lt 40 ]; then echo ; exit 1; fi
    - if [ "$BRANCHES_COVERAGE" -lt 40 ]; then echo ; exit 1; fi
    - if [ "$LINES_COVERAGE" -lt 40 ]; then echo ; exit 1; fi
    - echo "Coverage Metrics extracted successfully!"
  artifacts:
    paths:
      - alacrity_frontend/coverage/
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_frontend/**/*
# 5. Build - Frontend
build-frontend:
  stage: build
  script:
    - cd alacrity_frontend
    - npm ci
    - npm run build
  artifacts:
    paths:
      - alacrity_frontend/.next/
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_frontend/**/*

# 6. Dev - Frontend
dev:
  stage: dev
  script:
    - cd alacrity_frontend
    - npm ci
    - npm run dev &
    - sleep 40
    - wget --spider --quiet http://localhost:3000 || { echo "Dev server not running"; exit 1; }
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_frontend/**/*

# Todo: 
# link with jenins

# deploy:
#   stage: deploy
#   script:
#     - echo "Deploying the application..."
#     # Add your deployment commands here
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#       changes:
#         - alacrity_backend/**/*


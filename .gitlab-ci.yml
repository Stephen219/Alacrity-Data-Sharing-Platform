default:
  tags:
    - comsc-ci

image: node:20-alpine

stages:
  - lint # Linting for both frontend and backend
  - test # Testing for both frontend and backend
  - build # Build frontend
  - deploy 
  - dev # Development server for frontend

variables:
  CI_DEBUG_TRACE: "false"

# 1. Linting - Frontend
lint-frontend:
  stage: lint
  script:
    - echo "Installing dependencies..."
    - cd alacrity_frontend
    - npm ci
    - echo "Running lint..."
    - npm run lint --fix
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_frontend/**/*

# 2. Linting - Backend (Pylint)
lint-backend:
  stage: lint
  image: python:3.10
  before_script:
    - pip install pylint
  script:
    - echo "Running Pylint..."
    - pylint alacrity_backend --exit-zero  # Allow non-zero exit codes to avoid failing CI for now
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_backend/**/*.py

# # 3. Testing - Frontend
# test-frontend:
#   stage: test
#   script:
#     - cd alacrity_frontend
#     - npm ci
#     - echo "Running frontend tests..."
#     - npm run test
#   artifacts:
#     paths:
#       - test-reports/
#     expire_in: 1 week
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#       changes:
#         - alacrity_frontend/**/*





# 3. Testing - Frontend 
test-frontend:
  stage: test
  #TODO: fix this thing    it is the most redundant thing and i need it refactored
  script:
    - cd alacrity_frontend
    # FIXME : i am not sure if this is the right way to do it
    - npm ci
    - echo "Running frontend tests..."
    - npm run test -- --coverage
    - npm run test -- --coverage --coverageReporters=json-summary
    - echo "Extracting Coverage Metrics..."
    - STATEMENTS_COVERAGE=$(grep -o '"statements":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' coverage/coverage-summary.json | awk -F':' '{print $NF}')
    - FUNCTIONS_COVERAGE=$(grep -o '"functions":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' coverage/coverage-summary.json | awk -F':' '{print $NF}')
    - BRANCHES_COVERAGE=$(grep -o '"branches":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' coverage/coverage-summary.json | awk -F':' '{print $NF}')
    - LINES_COVERAGE=$(grep -o '"lines":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' coverage/coverage-summary.json | awk -F':' '{print $NF}')
    - echo $STATEMENTS_COVERAGE%
    - echo  $FUNCTIONS_COVERAGE%
    - echo  $BRANCHES_COVERAGE%
    - echo  $LINES_COVERAGE%
    - if [ "$STATEMENTS_COVERAGE" -lt 20 ]; then echo ; exit 1; fi   # 20 for this branch to go in 
    - if [ "$FUNCTIONS_COVERAGE" -lt 20 ]; then echo ; exit 1; fi
    - if [ "$BRANCHES_COVERAGE" -lt 20 ]; then echo ; exit 1; fi
    - if [ "$LINES_COVERAGE" -lt 20 ]; then echo ; exit 1; fi
    - echo "Coverage Metrics extracted successfully!"
  artifacts:
    paths:
      - alacrity_frontend/coverage/
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_frontend/**/*

# 4. Testing - Backend (Python Tests)
test-backend:
  stage: test
  image: python:3.10
  before_script:
    - cd alacrity_backend
    - pip install -r requirements.txt
    - pip install coverage
  script:
    - echo "Running backend tests..."
    - coverage run --source=alacrity_backend --omit="alacrity_backend/tests/*,alacrity_backend/migrations/*" manage.py test
    - coverage report
    - COVERAGE_PERCENT=$(coverage report | tail -n 1 | awk '{print $NF}' | sed 's/%//')
    - echo $COVERAGE_PERCENT%
    - echo $COVERAGE_PERCENT
    - echo "Generating coverage report..."
    - if [ $(echo "$COVERAGE_PERCENT < 50" | bc) -eq 1 ]; then echo "Coverage is below 50%. Exiting..."; exit 1; fi
  
    
  artifacts:
    paths:
      - test-reports/
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_backend/**/*

# 5. Build - Frontend
build-frontend:
  stage: build
  script:
    - cd alacrity_frontend
    - npm ci
    - npm run build
  artifacts:
    paths:
      - alacrity_frontend/.next/
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_frontend/**/*

# 6. Dev - Frontend
dev:
  stage: dev
  script:
    - cd alacrity_frontend
    - npm ci
    - npm run dev &
    - sleep 40
    - wget --spider --quiet http://localhost:3000 || { echo "Dev server not running"; exit 1; }
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - alacrity_frontend/**/*

# # 7. Deployment (Not functional yet)
# deploy:
#   stage: deploy
#   script:
#     - echo "Deploying..."
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
#   environment:
#     name: production





"""
Django settings for alacrity_backend project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from alacrity_backend.config import FRONTEND_URL, BACKEND_URL
import os
import sys
from minio import Minio
from dotenv import load_dotenv


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', '9cdf91842b864472c0570e917223afcc51a390b39a083a3f0de114cadf408f41')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',') if os.getenv('ENV') == 'production' else ['*']

# Application definition
INSTALLED_APPS = [
    'channels',
    'channels_redis',
    'daphne',
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'alacrity_backend',
    'datasets',
    'storages',
    'users',
    'research',
    'payments',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'notifications',
    'contact',
    'organisation',
    'dataset_requests',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'alacrity_backend.urls'

ASGI_APPLICATION = 'alacrity_backend.asgi.application'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'alacrity_backend.wsgi.application'

IS_GITLAB_CI = os.getenv('CI', 'false').lower() == 'true'

# CORS settings
CORS_ALLOW_ALL_ORIGINS = False if os.getenv('ENV') == 'production' else True
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', '').split(',') if os.getenv('ENV') == 'production' else [
    FRONTEND_URL,
    "http://127.0.0.1:3000",
    "http://localhost:3000",
    "http://10.72.102.244:80"
]

# ASGI and channel layers settings
if os.getenv('ENV') == 'production':
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                'hosts': [(os.getenv('REDIS_HOST', '127.0.0.1'), int(os.getenv('REDIS_PORT', 6379)))],
            },
        },
    }
else:
    # Use InMemoryChannelLayer for development
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer',
        },
    }

# Database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DJANGO_DATABASE_NAME', 'alacrity_db'),
        'USER': os.getenv('DJANGO_DATABASE_USER', 'root'),
        'PASSWORD': '' if IS_GITLAB_CI else os.getenv('DJANGO_DATABASE_PASSWORD', 'comsc'),
        'HOST': os.getenv('DJANGO_DATABASE_HOST', 'mysql'),
        'PORT': os.getenv('DJANGO_DATABASE_PORT', '3306'),
        'TEST': {
            'NAME': 'alacrity_dbtes',
        },
    }
}

# Use SQLite for tests
if 'test' in sys.argv:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:', 
        }
    }

ENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY', "EHqnpsZeTQrwcmGfADez0GCRcJ_vQNCg5ch_pQg83Z0=")

CORS_ALLOW_HEADERS = [
    'content-type',
    'authorization',
    'accept',
    'origin',
    'x-requested-with',
    'x-csrftoken',
    'accept-encoding',
    'accept-language',
    'cache-control',
    'connection',
    'content-length',
    'cookie',
    'host',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = False

# File storage configuration
MINIO_URL = "10.72.98.50:9000"
MINIO_ACCESS_KEY = "admin"
MINIO_SECRET_KEY = "Notgood1"
MINIO_BUCKET_NAME = "alacrity"
MINIO_SECURE = False

# MINIO CLIENT
minioClient = Minio(
    MINIO_URL,
    access_key=MINIO_ACCESS_KEY,
    secret_key=MINIO_SECRET_KEY,
    secure=MINIO_SECURE
)

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
DATA_UPLOAD_MAX_MEMORY_SIZE = 524288000  # 500MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 524288000  # 500MB

AWS_ACCESS_KEY_ID = MINIO_ACCESS_KEY
AWS_SECRET_ACCESS_KEY = MINIO_SECRET_KEY
AWS_STORAGE_BUCKET_NAME = MINIO_BUCKET_NAME
AWS_S3_ENDPOINT_URL = MINIO_URL
AWS_S3_CUSTOM_DOMAIN = f"{MINIO_URL}/{MINIO_BUCKET_NAME}"
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
AWS_S3_REGION_NAME = 'us-east-1'

# MySQL compatibility
import pymysql
pymysql.install_as_MySQLdb()

# Authentication settings
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

AUTH_USER_MODEL = 'users.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.TemplateHTMLRenderer',
        'rest_framework.renderers.MultiPartRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
    'DEFAULT_PERMISSION_CLASSES': [],  # Empty to respect view-level permissions
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
}

if DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'].append('rest_framework.renderers.BrowsableAPIRenderer')

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=9000),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'BLACKLIST_ENABLED': True,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_PASSWORD', '')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
print("EMAIL_HOST_USER", EMAIL_HOST_USER)
print("EMAIL_HOST_PASSWORD", EMAIL_HOST_PASSWORD)
print("DEFAULT_FROM_EMAIL", DEFAULT_FROM_EMAIL)

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

if DEBUG:
    import mimetypes
    mimetypes.add_type("application/javascript", ".js", True)

# PayPal integration
PAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID', '').strip()
PAYPAL_SECRET = os.getenv('PAYPAL_SECRET', '').strip()
PAYPAL_MODE = os.getenv('PAYPAL_MODE', 'sandbox')  
PAYPAL_RETURN_URL = os.getenv('PAYPAL_RETURN_URL', '')
PAYPAL_CANCEL_URL = os.getenv('PAYPAL_CANCEL_URL', '')